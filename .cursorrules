# Meta-Agente Generador - Contexto para Cursor AI

> **Proyecto:** Sistema de generaci√≥n autom√°tica de agentes AI usando el framework Agno
> **Versi√≥n:** 1.0
> **Stack:** Python 3.10+, Agno Framework, Anthropic Claude, Pydantic, Rich

---

## üéØ OBJETIVO DEL PROYECTO

Este proyecto es un **meta-agente conversacional** que crea otros agentes AI de forma autom√°tica. El meta-agente:
1. Conversa con el usuario para entender sus necesidades
2. Hace preguntas aclaratorias inteligentes
3. Genera un plan estructurado del agente a crear
4. Produce c√≥digo Python funcional usando el framework Agno
5. Guarda el agente generado como archivo `.py` ejecutable

**Filosof√≠a de dise√±o:** Simplicidad, modularidad, y c√≥digo generado listo para producci√≥n.

---

## üèóÔ∏è ARQUITECTURA DEL SISTEMA

### Componentes Principales

```
meta-agente/
‚îú‚îÄ‚îÄ meta_agent.py           # Orquestador principal
‚îÇ   ‚îú‚îÄ‚îÄ MetaAgent           # Clase principal
‚îÇ   ‚îú‚îÄ‚îÄ AgentPlan           # Modelo de datos (Pydantic)
‚îÇ   ‚îú‚îÄ‚îÄ analyzer_agent      # Agente para analizar solicitudes
‚îÇ   ‚îî‚îÄ‚îÄ planner_agent       # Agente para crear planes
‚îÇ
‚îú‚îÄ‚îÄ agent_templates.py      # Sistema de plantillas
‚îÇ   ‚îú‚îÄ‚îÄ AgentTemplate       # Clase generadora de c√≥digo
‚îÇ   ‚îú‚îÄ‚îÄ generate_basic_agent()
‚îÇ   ‚îú‚îÄ‚îÄ generate_agent_with_memory()
‚îÇ   ‚îî‚îÄ‚îÄ generate_agent_team()
‚îÇ
‚îî‚îÄ‚îÄ main.py                 # Punto de entrada CLI
```

### Flujo de Ejecuci√≥n

```mermaid
Usuario ‚Üí Solicitud ‚Üí Analyzer Agent ‚Üí Preguntas Aclaratorias
                                              ‚Üì
                                        Conversaci√≥n
                                              ‚Üì
                                      Planner Agent ‚Üí AgentPlan
                                              ‚Üì
                                      AgentTemplate ‚Üí C√≥digo Python
                                              ‚Üì
                                      Archivo .py guardado
```

---

## üìê PATRONES DE C√ìDIGO Y CONVENCIONES

### 1. Estructura de Modelos (Pydantic)

**Patr√≥n usado:**
```python
class AgentPlan(BaseModel):
    """Modelo de datos validado con Pydantic"""
    nombre: str = Field(description="...")
    rol: str = Field(description="...")
    nivel: int = Field(description="...")
    # ... m√°s campos
```

**Reglas:**
- Siempre usar Pydantic para estructuras de datos
- Incluir `description` en todos los Fields
- Usar valores default cuando sea apropiado
- Validaci√≥n autom√°tica de tipos

### 2. Generaci√≥n de C√≥digo con f-strings

**Patr√≥n usado:**
```python
def generate_basic_agent(spec: Dict) -> str:
    code = f'''"""
{spec.get('descripcion')}
"""

from agno.agent import Agent
# ... m√°s c√≥digo
'''
    return code
```

**Reglas:**
- Usar triple-quoted f-strings para c√≥digo multil√≠nea
- Mantener indentaci√≥n consistente
- Incluir docstrings en c√≥digo generado
- Usar `.get()` con defaults para diccionarios

### 3. Manejo de Agentes Agno

**Patr√≥n usado:**
```python
agent = Agent(
    name="Nombre del Agente",
    role="Rol espec√≠fico",
    model=Claude(id="claude-sonnet-4-20250514"),
    tools=[Tool1(), Tool2()],
    instructions=["instrucci√≥n 1", "instrucci√≥n 2"],
    markdown=True,
    show_tool_calls=True,
)
```

**Reglas:**
- Siempre especificar `name` y `role`
- Usar listas para `instructions`
- Habilitar `markdown=True` para mejor formato
- `show_tool_calls=True` para debugging

---

## üîß FRAMEWORK AGNO - REFERENCIA R√ÅPIDA

### Niveles de Agentes

1. **Nivel 1:** Agente b√°sico + herramientas
2. **Nivel 2:** Agente + conocimiento/storage
3. **Nivel 3:** Agente + memoria + razonamiento
4. **Nivel 4:** Equipos de agentes colaborando
5. **Nivel 5:** Workflows con estado

### Herramientas Disponibles

```python
# B√∫squeda Web
from agno.tools.duckduckgo import DuckDuckGoTools
tools = [DuckDuckGoTools()]

# Finanzas
from agno.tools.yfinance import YFinanceTools
tools = [YFinanceTools(stock_price=True, company_info=True)]

# Razonamiento
from agno.tools.reasoning import ReasoningTools
tools = [ReasoningTools(add_instructions=True)]

# Python
from agno.tools.python import PythonTools
tools = [PythonTools()]

# Archivos
from agno.tools.file import FileTools
tools = [FileTools()]
```

### Modelos Soportados

```python
# Claude (Anthropic)
from agno.models.anthropic import Claude
model = Claude(id="claude-sonnet-4-20250514")

# GPT (OpenAI)
from agno.models.openai import OpenAIChat
model = OpenAIChat(id="gpt-4o")

# Gemini (Google)
from agno.models.google import Gemini
model = Gemini(id="gemini-2.0-flash-exp")
```

### Memoria y Storage

```python
from agno.storage.agent import SqliteAgentStorage
from agno.memory.agent import AgentMemory

storage = SqliteAgentStorage(
    table_name="agent_sessions",
    db_file="agents_db.sqlite"
)

memory = AgentMemory(
    create_user_memories=True,
    create_session_summary=True,
)

agent = Agent(..., storage=storage, memory=memory)
```

### Equipos de Agentes

```python
from agno.team import Team

team = Team(
    name="Mi Equipo",
    mode="coordinate",  # o "sequential"
    members=[agent1, agent2, agent3],
    model=Claude(id="..."),
    instructions=["Colaboren efectivamente"],
)
```

---

## üí° PROMPTS PARA TAREAS COMUNES

### Cuando necesites A√ëADIR una nueva herramienta:

```
Por favor a√±ade soporte para [NOMBRE_HERRAMIENTA] al sistema de templates.

Contexto:
- La herramienta se importa como: from agno.tools.[nombre] import [Nombre]Tools
- Se inicializa como: [Nombre]Tools(par√°metros)
- Debe a√±adirse a _get_tool_import() y _generate_tools_init() en agent_templates.py

Genera el c√≥digo necesario siguiendo el patr√≥n existente.
```

### Cuando necesites CREAR un nuevo tipo de plantilla:

```
Crea una nueva plantilla para generar [TIPO_DE_AGENTE].

Requisitos:
- Debe seguir el patr√≥n de generate_basic_agent()
- Usar la misma estructura de imports y configuraci√≥n
- Retornar c√≥digo Python v√°lido como string
- Incluir docstring y ejemplo de uso

Referencia: agent_templates.py l√≠neas 20-60
```

### Cuando necesites MODIFICAR el flujo conversacional:

```
Modifica el m√©todo interactive_creation() para [OBJETIVO].

Contexto actual:
1. Solicitud inicial del usuario
2. Loop de preguntas aclaratorias (max 5 iteraciones)
3. Generaci√≥n del plan
4. Confirmaci√≥n del usuario
5. Generaci√≥n y guardado del c√≥digo

Mant√©n la estructura de Rich Console para el formato.
```

### Cuando necesites DEBUGGEAR generaci√≥n de JSON:

```
El planner_agent a veces genera texto adicional antes/despu√©s del JSON.

Soluci√≥n actual (meta_agent.py l√≠nea 120):
- Busca ```json y extrae el contenido
- Limpia markdown
- Parsea con json.loads()

¬øPuedes mejorar esta l√≥gica para ser m√°s robusta?
```

---

## üé® ESTILO Y CONVENCIONES

### Nomenclatura

- **Archivos:** snake_case (`agent_templates.py`)
- **Clases:** PascalCase (`AgentPlan`, `MetaAgent`)
- **Funciones:** snake_case (`generate_basic_agent`)
- **Constantes:** UPPER_SNAKE_CASE (si las hay)
- **Variables:** snake_case (`user_request`, `max_iterations`)

### Docstrings

```python
def function_name(param: Type) -> ReturnType:
    """
    Descripci√≥n concisa de una l√≠nea.
    
    Args:
        param: Descripci√≥n del par√°metro
        
    Returns:
        Descripci√≥n del retorno
        
    Raises:
        ExceptionType: Cu√°ndo se lanza
    """
```

### Type Hints

- **Siempre** usar type hints en funciones p√∫blicas
- Usar `Optional[Type]` para valores que pueden ser None
- Usar `List[Type]`, `Dict[K, V]` para colecciones
- Importar desde `typing` cuando sea necesario

### Imports

```python
# Est√°ndar library primero
import json
import os
from typing import Dict, List

# Third-party despu√©s
from pydantic import BaseModel
from rich.console import Console

# Local al final
from agent_templates import AgentTemplate
```

---

## üîç CONTEXTO DE DECISIONES T√âCNICAS

### ¬øPor qu√© Agno y no LangChain?

- **Performance:** Agno es ~10,000x m√°s r√°pido en instantiation
- **Memoria:** ~50x menos uso de memoria
- **Simplicidad:** API m√°s limpia y menos boilerplate
- **Moderno:** Dise√±ado para multi-modal y multi-agente

### ¬øPor qu√© Pydantic para AgentPlan?

- Validaci√≥n autom√°tica de tipos
- Serializaci√≥n JSON built-in
- Documentaci√≥n auto-generada
- Integraci√≥n perfecta con FastAPI (futuro)

### ¬øPor qu√© dos agentes (analyzer + planner)?

- **Separaci√≥n de responsabilidades:** An√°lisis vs. Planificaci√≥n
- **Especializaci√≥n:** Cada agente es experto en su tarea
- **Flexibilidad:** Pueden mejorarse independientemente
- **Claridad:** M√°s f√°cil de debuggear y mantener

### ¬øPor qu√© f-strings para templates?

- **Simplicidad:** M√°s f√°cil que Jinja2 para este caso
- **Performance:** Nativo de Python, muy r√°pido
- **Legibilidad:** El c√≥digo generado es claro
- **Mantenibilidad:** No hay dependencia adicional

---

## üöÄ CASOS DE USO COMUNES

### A√±adir soporte para nuevo modelo LLM

1. A√±adir import en `_get_model_import()`
2. A√±adir init en `_get_model_init()`
3. Actualizar documentaci√≥n en `create_plan()` prompt

### Crear agente con configuraci√≥n custom

```python
from meta_agent import MetaAgent, AgentPlan

plan = AgentPlan(
    nombre="Mi Agente Custom",
    rol="Hacer X",
    modelo="claude-sonnet-4",
    nivel=1,
    herramientas=["duckduckgo"],
    instrucciones=["Instrucci√≥n espec√≠fica"],
    ejemplo_uso="Pregunta ejemplo"
)

meta = MetaAgent()
code = meta.generate_code(plan)
```

### Extender con nueva caracter√≠stica

1. **Planificar:** ¬øQu√© componente afecta?
2. **Implementar:** Seguir patrones existentes
3. **Probar:** Crear agente de prueba
4. **Documentar:** Actualizar este archivo

---

## üêõ DEBUGGING TIPS

### Error: "JSON decode error"

**Causa:** El planner_agent gener√≥ texto extra  
**Soluci√≥n:** Mejorar limpieza en `create_plan()` l√≠nea 120

### Error: "Tool import not found"

**Causa:** Herramienta no mapeada en `_get_tool_import()`  
**Soluci√≥n:** A√±adir entrada en el diccionario `tool_map`

### Agente generado no funciona

**Checklist:**
- [ ] ¬øImports correctos?
- [ ] ¬øSintaxis v√°lida?
- [ ] ¬øHerramientas bien inicializadas?
- [ ] ¬øAPI key configurada?

### Rich Console no muestra colores

**Causa:** Terminal no soporta colores  
**Soluci√≥n:** Usar `console = Console(force_terminal=True)`

---

## üìö RECURSOS Y REFERENCIAS

### Documentaci√≥n Externa

- **Agno Docs:** https://docs.agno.com
- **Agno GitHub:** https://github.com/agno-agi/agno
- **Pydantic:** https://docs.pydantic.dev
- **Rich:** https://rich.readthedocs.io

### Archivos Clave del Proyecto

- `meta_agent.py` l√≠neas 30-80: L√≥gica de an√°lisis
- `meta_agent.py` l√≠neas 82-140: Creaci√≥n de planes
- `agent_templates.py` l√≠neas 10-70: Plantilla b√°sica
- `agent_templates.py` l√≠neas 150-200: Mapeo de herramientas

---

## ‚úÖ CHECKLIST PARA NUEVAS FEATURES

Cuando a√±adas funcionalidad nueva:

- [ ] C√≥digo sigue convenciones del proyecto
- [ ] Type hints a√±adidos
- [ ] Docstrings escritos
- [ ] Error handling implementado
- [ ] Probado con agente de ejemplo
- [ ] Este documento actualizado
- [ ] README actualizado si es necesario

---

## üéØ PROMPTS ESPEC√çFICOS PARA CURSOR

### Para generar c√≥digo nuevo:

```
Genera c√≥digo siguiendo los patrones en [archivo.py].
Usa las mismas convenciones de estilo.
Incluye type hints y docstrings.
Maneja errores apropiadamente.
```

### Para refactorizar:

```
Refactoriza [funci√≥n] para [objetivo].
Mant√©n compatibilidad con c√≥digo existente.
No cambies la API p√∫blica.
Sigue patrones del proyecto.
```

### Para debugging:

```
Hay un error en [archivo] l√≠nea [X].
El error es: [mensaje]
Contexto: [descripci√≥n]
¬øCu√°l es la causa probable y c√≥mo lo arreglo?
```

---

## üîÆ ROADMAP Y EXTENSIONES FUTURAS

### Prioridad Alta
- [ ] API REST con FastAPI
- [ ] Interfaz web con Gradio/Streamlit
- [ ] Tests unitarios
- [ ] Validaci√≥n de c√≥digo generado

### Prioridad Media
- [ ] Soporte para m√°s herramientas Agno
- [ ] Templates para workflows (Nivel 5)
- [ ] Historial de agentes creados
- [ ] Export a GitHub/Gist

### Prioridad Baja
- [ ] UI visual para dise√±o de agentes
- [ ] Marketplace de templates
- [ ] Integraci√≥n con LangSmith
- [ ] Multi-idioma

---

## üí¨ COMUNICACI√ìN CON CURSOR

### Cuando pidas ayuda a Cursor:

1. **S√© espec√≠fico:** "Modifica X en Y para hacer Z"
2. **Da contexto:** "Siguiendo el patr√≥n en l√≠nea N"
3. **Especifica restricciones:** "Sin cambiar la API"
4. **Pide explicaci√≥n:** "¬øPor qu√© este enfoque?"

### Ejemplo de buen prompt:

```
Necesito a√±adir soporte para Gemini 2.0 en agent_templates.py.

Contexto:
- Actualmente soportamos Claude y GPT-4
- El patr√≥n est√° en _get_model_import() y _get_model_init()
- Import: from agno.models.google import Gemini
- Init: Gemini(id="gemini-2.0-flash-exp")

Por favor:
1. A√±ade el caso para Gemini en ambas funciones
2. Sigue el mismo patr√≥n que Claude/GPT
3. Actualiza el docstring si es necesario
```

---

**√öltima actualizaci√≥n:** [Fecha]
**Mantenedor:** [Tu nombre]
**Contacto:** [Tu email/GitHub]